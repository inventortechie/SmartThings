/**
 *  LitterBox Usage Count
 *
 *  Copyright 2019 Kyle Newton
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "LitterBox Usage Count",
    namespace: "InventorTechie",
    author: "Kyle Newton",
    description: "Counts usage of a litterbox with a designated motion detector. After X times is met, a compatible color changing LED updates to one of 4 colors indicating it is time to scoop.",
    category: "Pets",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")


preferences {
    section("Turn on when motion detected:") {
        input "themotion", "capability.motionSensor", required: true, title: "Where?"
    }
    section("Counter limit to trigger light:") {
        input "counterlimit", "number", required: true, title: "Trigger quantity before executing?"
    }
	section("Choose hue lights you wish to control?") {
        input "hues", "capability.colorControl", title: "Which Color Changing Bulbs?", multiple:true, required: true
     	input "brightnessLevel", "number", title: "Brightness Level (1-100)?", required: true, defaultvalue: 100 //Select brightness
	}
   	section("Turn to this color") {
        input "chosencolor", "enum", title: "Color", required: true, options: ["Red":"Red","Green":"Green","Blue":"Blue","Yellow":"Yellow"]
    }   
	section("Use this reset button") {
        input "thereset", "capability.button", required: true
    }  
    
}

def installed() {
    log.debug "Installed with settings: ${settings}"
    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"
    unsubscribe()
    initialize()
}

def initialize() {
	state.motionCounter = 0
    
    subscribe(themotion, "motion.active", motionDetectedHandler)
    subscribe(thereset, "button", buttonResetHandler)
}

def incrementCounter() {
    state.motionCounter = state.motionCounter + 1
    log.debug "Motion has been detected $state.motionCounter times"
}

def resetCounter() {
	state.motionCounter = 0
    log.debug "Counter is reset, and is now back to $state.motionCounter"
    hues*.setLevel(0)
}

def motionDetectedHandler(evt) {
    log.debug "motionDetectedHandler called: $evt"
    incrementCounter()
    log.debug "Incrementing counter + 1"
    if (state.motionCounter >= counterlimit){
		log.debug "Motion count has been met"
        setHueColor(chosencolor)
	} else {
    	log.debug "Motion count has not been met yet, doing nothing"
	}

}

def buttonResetHandler(evt) {
    log.debug "buttonResetHandler called: $evt"
    resetCounter()
}

def setHueColor(color) { 
		log.debug "setHueColor was called and color received is $color"
	//Initialize the hue and saturation
		def hueColor = null
		def saturation = null

	//Use the user specified brightness level. If they exceeded the min or max values, overwrite the brightness with the actual min/max
		if (brightnessLevel<1) {
			brightnessLevel=1
	}
    else if (brightnessLevel>100) {
		brightnessLevel=100
	}    
            
        switch(color) {
            case "Red" : //Red
                hueColor = 1
                saturation = 100
                log.debug "This is Red"
                break;
            case "Green" : //Green
                hueColor = 33
                saturation = 100
                log.debug "This is Green"
                break;
            case "Blue" : //Blue
                hueColor = 70
                saturation = 100
                log.debug "This is Blue"
                break;
            case "Yellow" : //Yellow
                hueColor = 16
                saturation = 100 
                log.debug "This is Yellow"                
                break;
    	}
        //Change the color of the light
	
    	//def newValue = [switch: "on", hue: hueColor, saturation: saturation, level: brightnessLevel]  
        //hues*.setColor(newValue) // old way isn't working? 
        hues*.setLevel(brightnessLevel)
        hues*.setSaturation(saturation)
		hues*.setHue(hueColor)
        log.debug "$newValue"

}
